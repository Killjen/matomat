Database
   users(Username)
      Username STRING
      Balance INT
      UserID STRING

   stock(ArticleID)
      ArticleID
      Quantity
      Price
   
   TRANSACTIONS(UserID, ProductID, Time)
      UserID
      ProductID   
      Time

   ADMIN
      Username
      PasswordHash

Use Cases(Benjamin)
   Transaktionen ansehen

   Guthaben ändern (wahlfrei)

   Guthaben aufladen

   User-Uebersicht mit Filterfunktion

   Neuen User Hinzufügen

   User löschen

TRANSACTIONS
   create table transactions ( 
      Username varchar(255) not null, 
      ArticleID int,
      ArticleName varchar(255), (FOR CONVENIENCE)
      Payed float,  (BECAUSE PRICES CAN CHANGE)
      Time DATETIME, 
      CONSTRAINT pk_Transaction PRIMARY KEY (Username, ArticleID, Time));
   create table stock(
      ArticleID int not null auto_increment, 
      ArticleName varchar(255) not null, 
      Quantity int unsigned, 
      Price   float unsigned, 
        LogoPath    varchar(255),
      PRIMARY KEY (ArticleID));
   create table adminaction (
      AdminName varchar(255) not null,
      Target varchar(255),
      Action enum('CREATE','CHANGE','DELETE') not null,
      Time DATETIME not null,
      Col varchar(255),
      OldValue varchar(255),
      NewValue varchar(255),
      CONSTRAINT pk_Transaction PRIMARY KEY (AdminName, Action, Time));
   create table log (
      RFID varchar(255) not null,
      Time DATETIME
   )


users
   create table users(
      Username varchar(255) not null,
      Balance float,
      UserID varchar(255),
      PRIMARY KEY(Username));


LOGIN (database: secure_login)

CREATE TABLE secure_login.members (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, username VARCHAR(30) NOT NULL, `email` VARCHAR(50) NOT NULL, password CHAR(128) NOT NULL, salt CHAR(128) NOT NULL)

CREATE TABLE secure_login.login_attempts (id INT(11) NOT NULL, time VARCHAR(30) NOT NULL);

db user: sec_user pw: jxGnjawg

GRANT SELECT, INSERT, UPDATE ON `secure_login`.* TO 'sec_user'@'localhost';

TODO-LIST:
IMPORTANT:
Success-Message for adding unknown ID to logg (with time)
servos
reduce stock after purchase
OPTIONAL:
add time interval for filter
fix RFID/UserIDs to length 8
automatically delete some entries when DB is "full"
